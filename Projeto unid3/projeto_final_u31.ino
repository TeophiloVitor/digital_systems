//Desenvolvido por: Fernando Lucas e Teophilo Vitor
#include <stdio.h>

int n[10] = {0b11111010, 0b01100000, 0b11011100, 0b11110100, 0b01100110, 0b10110110, 0b10111110, 0b11100000, 0b11111110, 0b11110110};

const float x_test[20][7] ={{4.23124152192407,	0.780309467717684,	4.73069566321714,	2.15619918044502,	0.645429861003741,	3.78790916632293,	2.96986969075046},
    {3.24888300835112,	3.96360535360194,	2.48093370626606,	2.34235998661426,	2.14836463696148,	2.5151469961482,	2.67994042306975},
    {2.16554632990741,	2.6060779001275,	4.48085712989322,	4.64036644665052,	2.91077436368763,	0.280001838168012,	2.22692011380599},
    {0.762151957713143,	0.456854414744083,	0.519661109555184,	0.136257880039196,	3.25290168892076,	2.23282176220286,	2.58650027855},
    {0.53912209699852,	0.515996288930497,	0.651057041400337,	0.768716017553914,	2.72808019324538,	4.34333783654841,	0.110625704423133},
    {4.30006788404007,	2.77679872909223,	0.544231745947496,	2.73675978224,		2.08164476402139,	0.617392969782582,	3.18346143286821},
    {4.01680417345246,	3.36226975177423,	4.87106940773464,	3.00297165970139,	3.12414129765721,	0.740835344084534,	2.02289881376881},
    {4.18926965292184,	2.89572969263963,	0.396910472954065,	4.02934045236676,	4.89035825877264,	0.450775241244141,	2.87821162589539},
    {3.18682864404211,	0.246009491982842,	2.84975675830504,	2.52702426710471,	0.379036824158264,	4.02054039792459,	2.45709297884847},
    {2.78846724647861,	4.34152947108247,	0.0428940572222801,	4.33896449221277,	4.17976296195617,	0.520389822682154,	4.51045951563975},
    {4.75405002486426,	0.773532788537373,	0.195713883460672,	2.53101856884077,	3.93359798339333,	3.46951597299123,	3.72586259690484},
    {4.90673141299352,	2.71636226514646,	3.72007475531398,	2.25496967617331,	3.22634152510037,	2.83609061734319,	4.12772560019289},
    {3.79932738408708,	0.501434608965644,	0.430495635104512,	4.70856848811188,	4.94201256674443,	3.74428778854784,	2.97525618875179},
    {0.595217632285472,	4.29061872355747,	2.61175354558375,	4.80309134547755,	4.18433073523246,	3.11662726390623,	2.76651301057069},
    {0.577832291750433,	0.603045393604821,	0.561380279336064,	0.680588420411198,	3.34858349520416,	3.72044032464396,	0.0762902421358996},
    {3.27087014640231,	4.62699938668171,	2.81346158992014,	2.15128529802797,	4.94122642575873,	4.11368522813727,	3.57036931346176},
    {0.0120791189391476,	2.20890340882747,	3.28254617361558,	3.4191909810849,	3.0067179536927,	4.87380039234021,	4.48437979131644},
    {4.8674491704949,	4.12920336785557,	2.35023643263196,	2.15988645302198,	3.97551711938743,	4.82317377616377,	3.90180519748302},
    {4.98679527052912,	4.70867485772606,	3.97909913010635,	2.11994276752223,	3.32015099877836,	3.29693707280193,	2.89828577695141},
    {4.47004534417757,	2.32050723263463,	2.11302813598642,	3.18826599662708,	2.92249180449155,	0.476472158413763,	4.30157370959935}
};

const float dense_1[7][20] = {{-0.04022649,  0.01311583,  0.2128712 ,  0.03673191, -2.1034918 ,
        -0.12400191, -0.06401231,  0.24323067, -0.53678805, -0.8636676 ,
        -0.21064481,  0.30001962,  0.2589999 ,  0.12051471,  0.14671907,
                               0.9387061 , -0.6293177 ,  0.5901386 ,  0.6600167 ,  0.15299201},
{0.04086897,  0.23465408, -0.03916394,  0.02730575,  0.3052402 ,
        -1.8217739 , -0.11511603, -0.09247869,  0.03089312,  0.4011109 ,
         0.6910111 , -1.0332177 ,  1.2775631 ,  0.3127477 ,  0.29360217,
        0.59912527,  1.0757821 ,  0.70192623, -0.7324807 , -0.29095435},
        {-0.5115854 ,  0.75463027,  0.46590626, -1.6780789 ,  0.5217109 ,
        -0.0777854 , -0.17283241, -1.5077453 ,  0.39752507, -0.28183523,
         0.37622795, -1.0025382 ,  0.94857943, -0.06627414, -0.8077671 ,
        -0.09496963,  0.05365459, -0.7204917 ,  0.653368  ,  0.6384575 },
        {-0.41898602,  0.01744807,  0.41817775,  0.05998835,  0.31658763,
         0.11178113, -0.58234847, -0.22275738,  0.8428555 , -0.5760043 ,
        -0.13725929,  0.49440244, -0.1669679 , -0.01503076, -0.24126819,
        0.34461167, -0.10399879, -0.8816925 , -0.13040656,  1.6055453 },
        {-0.6172311 , -0.0209862 ,  0.6006967 ,  0.10939733,  0.13225955,
         0.06432099, -0.6573587 ,  0.28722712, -0.4070406 ,  0.32565013,
        -0.01808057,  0.2837082 , -0.39966264,  0.12351572,  0.46723682,
        -0.3609397 ,  0.46161422, -0.3406491 , -0.30369762, -0.19361724},
        {-0.38474628, -1.5806255 ,  0.1783985 ,  0.11918026,  0.21115264,
         0.53577155, -0.1621293 , -0.02360822, -0.24666287,  0.55836457,
         0.5496887 , -0.11504924, -0.3541047 , -1.9065013 ,  0.72826046,
        -0.26656485, -0.12573081,  0.11621775,  0.14418747, -0.35624543},
        {-0.5535194 , -0.33825037, -0.16252181,  0.15343376, -0.6988818 ,
         0.05058606, -0.09075207,  0.23098177,  1.8938236 , -0.3295977 ,
        -0.7347805 , -0.23172303, -0.10812666,  0.13805586, -0.12963055,
         1.9781406 ,  0.07499984, -0.9915018 ,  0.32591185, -0.1719027 }
};

const float bias_1[20] = { -0.2779131 , -0.2845455 ,  0.26629567,  0.9639108 ,  0.22113414,
        0.921747  , -0.2917883 ,  0.6556085 , -0.6338754 ,  0.5327968 ,
       -1.0032971 , -0.20552658, -0.14413042,  0.5822046 , -0.47298265,
       -1.0760717 , -0.14343317, -0.4383232 , -0.69550544, -0.44916582
};

const float dense_2[20][4] = {{1.1368499 ,  0.12367865,  0.3721777 , -0.18983023},
{ 0.05871192,  1.752836  ,  1.4680518 ,  0.10566724},
   {-1.0970306 , -0.19539616, -0.17915343, -0.04205158},
    {-0.5903123 ,  1.0437347 , -0.6226559 ,  2.3927262 },
     {-1.2482716 , -1.4953082 , -0.92736757,  0.4439882 },
      {-1.1422653 , -0.8496322 ,  1.8303741 ,  1.2786312 },
       { 1.3721454 ,  0.25074095,  0.12388813,  0.33525118},
        {-0.4475239 ,  1.6249722 , -0.7551471 ,  1.2816839 },
         { 0.31062123,  0.85015345,  1.070784  ,  1.1282474 },
          {-1.0617206 ,  1.4372032 ,  0.6735529 , -0.12067676},
           { 0.85684025, -1.389193  , -1.4763306 , -1.4831631 },
            { 1.2535528 , -1.8552306 , -0.61313546,  1.6577382 },
             {-0.5670995 ,  0.6730364 , -1.0484592 , -1.5545149 },
              {-1.5329454 ,  2.418726  ,  0.8798953 ,  1.3895417 },
               { 1.3555722 , -0.58608496, -1.5989227 ,  1.6732334 },
                {-1.0258131 ,  1.3500487 ,  0.88530695, -1.0895125 },
                 { 0.71920806,  1.1273816 , -0.42542148,  0.4779404 },
                  { 0.24953696,  1.0434349 , -0.6941112 , -1.5584079 },
                   { 1.4255183 , -0.2992743 ,  0.5453169 , -0.91159767},
                    { 0.87303084, -2.1349382 , -1.3994145 , -0.22722326}
};

const float bias_2[4] = { -0.9459212 , -0.13173708,  0.04956673, -0.06590446 };


int predict(float v1, float v2, float v3, float v4, float v5, float v6, float v7){
  float input[7] = {v1,v2,v3,v4,v5,v6,v7};
  float n1[20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  float n2[4] = {0,0,0,0};

  //camada dense 1
  for(int i=0;i<7;i++){
    for(int j=0;j<20;j++){
      if(dense_1[i][j] != 0. ){
        n1[j] += input[i]*dense_1[i][j];
      }
    }
  }

  //bias1
  for(int i=0;i<20;i++){
    if(bias_1[i]!=0.)
      n1[i]+=bias_1[i];
  }

  //tanh
  for(int i=0;i<7;i++){
  	n1[i] = tanh(n1[i]);
  }

  //camada dense 2
  for(int i=0;i<20;i++){
    for(int j=0;j<4;j++){
      if(dense_2[i][j] != 0. ){
        n2[j] += n1[i]*dense_2[i][j];
      }
    }
  }

  //bias2
  for(int i=0;i<4;i++){
    if(bias_1[i]!=0.)
      n2[i]+=bias_2[i];
  }

  //camada de saída: sigmoid
  float p1 = (1 / (1 + exp(-n2[0])));
  float p2 = (1 / (1 + exp(-n2[1])));
  float p3 = (1 / (1 + exp(-n2[2])));
  float p4 = (1 / (1 + exp(-n2[3])));
  
  int dig1 = roundf(p1);
  int dig2 = roundf(p2);
  int dig3 = roundf(p3);
  int dig4 = roundf(p4);
  
  return 8 * dig1 + 4 * dig2 + 2 * dig3 + 1 * dig4;       
}

//Função para armazenar saída em um vetor
void armazenaVetor(int v[], int aux){
  int i=0;
  while(i<20){
    float g = x_test[i][0];
    float f = x_test[i][1];
    float e = x_test[i][2];
    float d = x_test[i][3];
    float c = x_test[i][4];
    float b = x_test[i][5];
    float a = x_test[i][6];
    v[i] = predict(g,f,e,d,c,b,a);
    i+=1;
  }
}
//Função para ordenar vetor
void merge(int arr[], int p, int q, int r) {
  int n1 = q - p + 1;
  int n2 = r - q;
  int L[n1], M[n2];
  for (int i = 0; i < n1; i++)
    L[i] = arr[p + i];
  for (int j = 0; j < n2; j++)
    M[j] = arr[q + 1 + j];
  int i, j, k;
  i = 0;
  j = 0;
  k = p;
  while (i < n1 && j < n2) {
    if (L[i] <= M[j]) {
      arr[k] = L[i];
      i++;
    } else {
      arr[k] = M[j];
      j++;
    }
    k++;
  }
  while (i < n1) {
    arr[k] = L[i];
    i++;
    k++;
  }
  while (j < n2) {
    arr[k] = M[j];
    j++;
    k++;
  }
}
//Função para ordenar vetor
void mergeSort(int arr[], int l, int r) {
  if (l < r) {
    int m = l + (r - l) / 2;
    mergeSort(arr, l, m);
    mergeSort(arr, m + 1, r);
    merge(arr, l, m, r);
  }
}

int main(){
 
  Serial.begin(9600);
  
  //leds
  DDRD |= 0b11111111;
  PORTD = 0b00000000; 
  DDRB |= 0b00000001;
  PORTB = 0b00000000; 
  
  int i =0, aux=0, v[20], aux1[7];
  armazenaVetor(v, aux);
  for(i=0; i<28; i++){
	Serial.print("n: ");
    Serial.println(v[i]);
  }
  int n_aux = sizeof(v)/sizeof(v[0]);
  mergeSort(v, 0, n_aux - 1);
  
  i=0;
  int z=0, x=0;
  //Remoção de valores duplicados
  while(z<10){
    if(i==1 || i==3 || i==5 || i==8){
      i++;
    }
    else if(v[x] == i){
      aux1[z] = i; 
      i++;
      x++;
      z++;
    }
    else{
	  x++;
    }
  }

  i=0;
  while(1){
    if(i>7){
    	i = 0;
    }
    switch (aux1[i])
    {
      case 0:
        PORTD = n[0] ; 
 		PORTB = 0b00000001;
        break;
      case 1:
        PORTD = n[1];
        break;
      case 2:         
        PORTD = n[2];
        break;
      case 3: 
        PORTD = n[3];
        break;
      case 4:
        PORTD = n[4];
		PORTB = 0b00000001;
        break;
      case 5:
        PORTD = n[5];
		PORTB = 0b00000001;
        break;
      case 6:
        PORTD = n[6];
		PORTB = 0b00000001;
        break;
      case 7:
        PORTD = n[7];
        break;
      case 8:
        PORTD = n[8];
		PORTB = 0b00000001;
        break;
      case 9:
        PORTD = n[9];
      	PORTB = 0b00000001;
        break;

      default:
        break;
    }
  	_delay_ms(1000);
    PORTD &= 0b00000000; //apaga todos os leds da porta D
    PORTB &= 0b00000000; //apaga todos os leds da porta B
    i++;
  	_delay_ms(1000);
  }
}